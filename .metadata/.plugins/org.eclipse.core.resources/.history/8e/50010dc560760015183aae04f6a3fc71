public class BST{	
	public Link head;
	public Link current;
	public void insert(int data){
		Link temp= new Link(data);
		if(head==null){
			head= temp;
			head.right= null;
			head.left= null;
			head.parent= null;
			current= head;
		}
		else{
			current= head;
			while(true){
				if(temp.data>= current.data){  
					if(current.right!=null){
						current= current.right;	
					}
					else{
						current.right= temp;
						temp.parent= current;
						temp.right= null;
						temp.left= null;
						current= current.right;
						break;
					}
				}
				else if(temp.data< current.data){
					if(current.left!=null){
						current= current.left;
					}
					else{
						current.left= temp;
						temp.parent= current;
						temp.right= null;
						temp.left= null;
						current= current.left;
						break;
					}
				}
			}
		}
	}
	public void RotateLeft(Link u){
		Link w= u.right;
		if(w!= null){
			w.parent= u.parent;
			if(u.parent!= null){
				if(u==u.parent.left){
					u.parent.left= w;
				}
				else u.parent.right= w;
			}
			u.right= w.left;
			if(w.left!= null){
				u.right.parent=u;
			}
			u.parent= w;
			w.left= u;
			if(u==head){
				head= w;
				head.parent= null;
			}
		}
	}
	public void RotateRight(Link u){
		Link w= u.left;
		if(w!= null){
			w.parent= u.parent;
			if(u.parent!= null){
				if(u==u.parent.left){
					u.parent.left= w;
				}
				else u.parent.right= w;
			}
			u.left= w.right;
			if(w.right!= null){
				u.left.parent=u;
			}
			u.parent= w;
			w.right= u;
			if(u==head){
				head= w;
				head.parent= null;
			}
		}
	}
	public Link search(int key){
		current= head;
		while(key!=current.data){
			if(key>current.data)
				current= current.right;
			else 
				current= current.left;
		}
		return current;
	}
	public void preorder(Link curr){
		if(curr!= null){
			preorder(curr.left);
			//System.out.print(curr.data+" ");
			preorder(curr.right);
			System.out.print(curr.data+" ");
		}
	}
}